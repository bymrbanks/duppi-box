// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    // referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    Session       Session[]
    player        Player[]
}

model Match {
    id        String    @id @default(cuid())
    title     String?
    player    Player[]
    winner    String?
    loser     String?
    status    String?
    rounds    Int       @default(0)
    completed Boolean?
    startTime DateTime?
    createdAt DateTime
    updatedAt DateTime?
}

model Player {
    id      String    @id @default(cuid())
    matchId String
    match   Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)
    userId  String
    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    action  String[]
    score   Int       @default(0)
    rounds  Boolean[]
}
