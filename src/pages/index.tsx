import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { trpc } from "../utils/trpc";
import { useSession } from "next-auth/react";
import { Player, Match } from "../utils/types";

const Home: NextPage = () => {
  const { data: session } = useSession();
  const utils = trpc.useContext();
  const createMatch = trpc.useMutation("match.create");
  const joinMatchMutation = trpc.useMutation(["match.join"]);
  const getMatch = trpc.useQuery(["match.getAll"]);

  const newMatch = () => {
    createMatch.mutate(null, {
      onSuccess: () => {
        utils.invalidateQueries(["match.getAll"]);
      },
    });
  };
  // const getAllMatches = () => {
  //   getMatch.query();
  // };

  const [result, setResult] = useState({ winner: "", loser: "", tie: "" });

  const [player1, setPlayer1] = useState<Player>({
    id: "",
    name: "Kacy",
    action: "",
    score: 0,
    status: ""
  });
  const [player2, setPlayer2] = useState<Player>({
    id: "",
    name: "Carlton",
    action: "",
    score: 0,
    status: ""
  });

  const joinMatch = (id: string) => {
    joinMatchMutation.mutate(
      { id },
      {
        onSuccess: () => {
          utils.invalidateQueries(["match.getAll"]);
        },
      }
    );
  };

  const playerSelect = () => {
    if (!player1.action || !player2.action) return;

    if (player1.action === player2.action) {
      console.log("tie", player1.action, player2.action);
      setResult({ ...result, tie: "Tie" });
    } else if (ACTIONS(player1.action) === player2.action) {
      setResult({
        ...result,
        winner: player2.name,
        loser: player1.name,
      });
      // setPlayer1( { ...player1, score: player1.score + 1 });
    } else if (ACTIONS(player2.action) === player1.action) {
      setResult({
        ...result,
        winner: player1.name,
        loser: player2.name,
      });
    }

    // result.winner = players[winner].name
    // players[winner].score++
    // players[winner].choice = null
    // players[winner === "winner" ? "loser" : "winner"].choice = null
  };

  const ACTIONS = (action: string) => {
    if (action === "ROCK") return "PAPER";
    if (action === "PAPER") return "SCISSORS";
    if (action === "SCISSORS") return "ROCK";
  };

  useEffect(() => {
    console.log("useEffect");
    playerSelect();
    // setResult({ winner: "", loser: "", tie: "" });
    // setPlayer1({ ...player1, action: "" });
    // setPlayer2({ ...player1, action: "" });
  }, [player1, player2]);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container">
        <button className="p-2 bg-blue-500" onClick={newMatch}>
          New Game
        </button>

        {getMatch.data &&
          getMatch.data.map((match) => {
            return (
              <div className="w-1/2 p-2" key={match.id}>
                <a
                  href={"./game/match/"+match.id}
                  className="p-2 bg-blue-500"
                  onClick={() => {
                    if (session?.id) {
                      joinMatch(match.id);
                    }
                  }}
                >
                  Join Match {match.id}
                </a>
              </div>
            );
          })}

        {/* <button className="p-2 bg-blue-500" onClick={getAllMatches}>
          New Game
        </button> */}
        <div className="flex flex-col md:flex-row">
          <div className="flex-1">
            <div className="text-md">{player1.name}</div>
            <div className="flex flex-col">
              <div className="flex-1">
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer1({ ...player1, action: "ROCK" });
                  }}
                >
                  🪨{" "}
                </button>
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer1({ ...player1, action: "PAPER" });
                  }}
                >
                  📄{" "}
                </button>
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer1({ ...player1, action: "SCISSORS" });
                  }}
                >
                  ✂️
                </button>
              </div>
            </div>
          </div>
          <div className="flex-1 mt-20 mb-20">
            <div className="text-md">{player2.name}</div>
            <div className="flex flex-col">
              <div className="flex-1">
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer2({ ...player2, action: "ROCK" });
                  }}
                >
                  🪨{" "}
                </button>
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer2({ ...player2, action: "PAPER" });
                  }}
                >
                  📄{" "}
                </button>
                <button
                  className="px-3 py-2  bg-gray-300 m-px rounded"
                  value="rock"
                  onClick={(e) => {
                    setPlayer2({ ...player2, action: "SCISSORS" });
                  }}
                >
                  ✂️
                </button>
              </div>
            </div>
          </div>
        </div>

        <div className="text-center">
          <div className="text-2xl mb-3">Results</div>
          <div className="flex flex-col">
            <div className="flex-1">
              <div className="text-md">
                {player1.name} {player1.action}
              </div>
              <div className="flex flex-col">
                <div className="flex-1">
                  <div className="text-md">{result.winner}</div>
                  <div className="text-md">{result.loser}</div>
                  <div className="text-md">{result.tie}</div>
                </div>
              </div>
            </div>
            <div className="flex-1">
              <div className="text-md">
                {player2.name} {player2.action}
              </div>
              <div className="flex flex-col">
                <div className="flex-1">
                  <div className="text-md">{result.winner}</div>
                  <div className="text-md">{result.loser}</div>
                  <div className="text-md">{result.tie}</div>
                </div>
              </div>
            </div>
          </div>
          <div className="text-2xl mt-20">Winner is {result?.winner}</div>
        </div>
      </div>
    </>
  );
};

export default Home;
